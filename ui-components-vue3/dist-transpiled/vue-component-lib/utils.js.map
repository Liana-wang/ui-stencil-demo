{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/vue-component-lib/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { VNode, defineComponent, getCurrentInstance, h, inject, ref, Ref } from 'vue';\n\nexport interface InputProps extends Object {\n  modelValue: string | boolean;\n}\n\nconst UPDATE_VALUE_EVENT = 'update:modelValue';\nconst MODEL_VALUE = 'modelValue';\nconst ROUTER_LINK_VALUE = 'routerLink';\nconst NAV_MANAGER = 'navManager';\nconst ROUTER_PROP_REFIX = 'router';\n\ninterface NavManager<T = any> {\n  navigate: (options: T) => void;\n}\n\ninterface ComponentOptions {\n  modelProp?: string;\n  modelUpdateEvent?: string;\n}\n\nconst getComponentClasses = (classes: unknown) => {\n  return (classes as string)?.split(' ') || [];\n};\n\nconst getElementClasses = (ref: Ref<HTMLElement | undefined>, componentClasses: Set<string>, defaultClasses: string[] = []) => {\n  return [...Array.from(ref.value?.classList || []), ...defaultClasses]\n    .filter((c: string, i, self) => !componentClasses.has(c) && self.indexOf(c) === i);\n};\n\n/**\n* Create a callback to define a Vue component wrapper around a Web Component.\n*\n* @prop name - The component tag name (i.e. `ion-button`)\n* @prop componentProps - An array of properties on the\n* component. These usually match up with the @Prop definitions\n* in each component's TSX file.\n* @prop componentOptions - An object that defines additional\n* options for the component such as router or v-model\n* integrations.\n*/\nexport const defineContainer = <Props>(name: string, componentProps: string[] = [], componentOptions: ComponentOptions = { }) => {\n  const {modelProp, modelUpdateEvent} = componentOptions;\n\n  /**\n  * Create a Vue component wrapper around a Web Component.\n  * Note: The `props` here are not all properties on a component.\n  * They refer to whatever properties are set on an instance of a component.\n  */\n  const Container = defineComponent<Props & InputProps>((props, {attrs, slots, emit}) => {\n    let modelPropValue = (props as any)[modelProp];\n    const containerRef = ref<HTMLElement>();\n  const classes = new Set(getComponentClasses(attrs.class));\n    const onVnodeBeforeMount = (vnode: VNode) => {\n      // Add a listener to tell Vue to update the v-model\n      if (vnode.el) {\n      vnode.el.addEventListener(modelUpdateEvent.toLowerCase(), (e: Event) => {\n        modelPropValue = (e?.target as any)[modelProp];\n        emit(UPDATE_VALUE_EVENT, modelPropValue);\n\n        /**\n         * We need to emit the change event here\n         * rather than on the web component to ensure\n         * that any v-model bindings have been updated.\n         * Otherwise, the developer will listen on the\n         * native web component, but the v-model will\n         * not have been updated yet.\n         */\n        emit(modelUpdateEvent, e);\n        e.stopImmediatePropagation();\n      });\n      }\n    };\n\n    const currentInstance = getCurrentInstance();\n    const hasRouter = currentInstance?.appContext?.provides[NAV_MANAGER];\n    const navManager: NavManager | undefined = hasRouter ? inject(NAV_MANAGER) : undefined;\n    const handleRouterLink = (ev: Event) => {\n      const {routerLink} = props as any;\n      if (!routerLink) return;\n\n      const routerProps = Object.keys(props).filter(p => p.startsWith(ROUTER_PROP_REFIX));\n\n      if (navManager !== undefined) {\n      let navigationPayload: any = {event: ev };\n        routerProps.forEach(prop => {\n      navigationPayload[prop] = (props as any)[prop];\n        });\n        navManager.navigate(navigationPayload);\n      } else {\n      console.warn('Tried to navigate, but no router was found. Make sure you have mounted Vue Router.');\n      }\n    }\n\n    return () => {\n      getComponentClasses(attrs.class).forEach(value => {\n        classes.add(value);\n      });\n\n      const oldClick = (props as any).onClick;\n      const handleClick = (ev: Event) => {\n        if (oldClick !== undefined) {\n      oldClick(ev);\n        }\n        if (!ev.defaultPrevented) {\n      handleRouterLink(ev);\n        }\n      }\n\n      let propsToAdd = {\n      ...props,\n      ref: containerRef,\n        class: getElementClasses(containerRef, classes),\n        onClick: handleClick,\n        onVnodeBeforeMount: (modelUpdateEvent) ? onVnodeBeforeMount : undefined\n      };\n\n      if (modelProp) {\n      propsToAdd = {\n        ...propsToAdd,\n        [modelProp]: props.hasOwnProperty('modelValue') ? props.modelValue : modelPropValue\n      }\n    }\n\n      return h(name, propsToAdd, slots.default && slots.default());\n    }\n  });\n\n  Container.displayName = name;\n  Container.props = [...componentProps, ROUTER_LINK_VALUE];\n  if (modelProp) {\n      Container.props.push(MODEL_VALUE);\n    Container.emits = [UPDATE_VALUE_EVENT, modelUpdateEvent];\n  }\n\n  return Container;\n};\n"]}