/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Shap, Size, Type } from "./components/button/button";
import { JSX } from "@stencil/core";
import { ComponentProps, ComponentRef } from "./interface";
export namespace Components {
    interface AiBackdrop {
        /**
          * 点击背景时，是否阻止冒泡
         */
        "stopPropagation": boolean;
        /**
          * 背景是否可点击，默认为true，会出发aiBackdropTap
         */
        "tappable": boolean;
        /**
          * 背景是否可见，默认可见
         */
        "visible": boolean;
    }
    interface AiButton {
        /**
          * 适应父元素的宽度
         */
        "block"?: boolean;
        /**
          * 警告按钮
         */
        "danger"?: boolean;
        /**
          * 是否禁用
         */
        "disabled"?: boolean;
        /**
          * 幽灵按钮
         */
        "ghost"?: boolean;
        /**
          * 点击跳转的地址，指定此属性 button 的行为和 a 链接一致
         */
        "href"?: string;
        /**
          * 设置 button 原生的 type 值
         */
        "htmlType"?: string;
        /**
          * 按钮形状
         */
        "shap"?: Shap;
        /**
          * 尺寸
         */
        "size"?: Size;
        /**
          * 相当于 a 链接的 target 属性，href 存在时生效
         */
        "target"?: string;
        /**
          * 类型
         */
        "type"?: Type;
    }
    interface AiControl {
    }
    interface AiInput {
        /**
          * 可以点击清除图标删除内容
         */
        "allowClear"?: boolean;
        /**
          * 是否有边框
         */
        "bordered"?: boolean;
        /**
          * 输入框默认内容
         */
        "defaultValue"?: string;
        /**
          * 是否禁用
         */
        "disabled"?: boolean;
        /**
          * 是否带有前缀的 input
         */
        "hasPrefix"?: boolean;
        /**
          * 是否带有后缀的 input
         */
        "hasSuffix"?: JSX.Element;
        /**
          * 最大长度
         */
        "maxLength"?: number;
        /**
          * 预设文案
         */
        "placeholder"?: string;
        /**
          * 是否只读
         */
        "readonly"?: boolean;
        /**
          * 输入值
         */
        "value": string;
    }
    interface AiPopover {
        /**
          * 点击背景时关闭
         */
        "backdropDismiss": boolean;
        /**
          * 在popover中显示的组件
         */
        "component": ComponentRef;
        /**
          * 传递给弹出窗的数据
         */
        "componentProps"?: ComponentProps;
        /**
          * 关闭popover
         */
        "dismiss": (data?: any, role?: string) => Promise<boolean>;
        /**
          * 触发动画的事件
         */
        "event": any;
        /**
          * popover已经销毁
         */
        "onDidDismiss": () => Promise<any>;
        /**
          * popover即将销毁
         */
        "onWillDismiss": () => Promise<any>;
        /**
          * index值
         */
        "overlayIndex": number;
        /**
          * 弹出popover
         */
        "present": () => Promise<void>;
        /**
          * 是否显示背景
         */
        "showBackdrop": boolean;
    }
    interface AiSelect {
        /**
          * 选中之后做对比的条件
         */
        "compareWith"?: string | Function | null;
        /**
          * 是否禁用
         */
        "disabled": boolean;
        /**
          * 显示下拉选项
         */
        "open": (event?: UIEvent) => Promise<any>;
        /**
          * 预设文案
         */
        "placeholder"?: string | null;
        /**
          * 选中的值
         */
        "selected"?: any | null;
    }
    interface AiSelectOption {
        /**
          * 是否禁用
         */
        "disabled": boolean;
        /**
          * 选项的value
         */
        "option"?: any | null;
    }
    interface AiSelectPopover {
        /**
          * 选项
         */
        "options": ReadonlyArray<any>;
    }
    interface AiStringfy {
        /**
          * data
         */
        "data": any;
    }
}
declare global {
    interface HTMLAiBackdropElement extends Components.AiBackdrop, HTMLStencilElement {
    }
    var HTMLAiBackdropElement: {
        prototype: HTMLAiBackdropElement;
        new (): HTMLAiBackdropElement;
    };
    interface HTMLAiButtonElement extends Components.AiButton, HTMLStencilElement {
    }
    var HTMLAiButtonElement: {
        prototype: HTMLAiButtonElement;
        new (): HTMLAiButtonElement;
    };
    interface HTMLAiControlElement extends Components.AiControl, HTMLStencilElement {
    }
    var HTMLAiControlElement: {
        prototype: HTMLAiControlElement;
        new (): HTMLAiControlElement;
    };
    interface HTMLAiInputElement extends Components.AiInput, HTMLStencilElement {
    }
    var HTMLAiInputElement: {
        prototype: HTMLAiInputElement;
        new (): HTMLAiInputElement;
    };
    interface HTMLAiPopoverElement extends Components.AiPopover, HTMLStencilElement {
    }
    var HTMLAiPopoverElement: {
        prototype: HTMLAiPopoverElement;
        new (): HTMLAiPopoverElement;
    };
    interface HTMLAiSelectElement extends Components.AiSelect, HTMLStencilElement {
    }
    var HTMLAiSelectElement: {
        prototype: HTMLAiSelectElement;
        new (): HTMLAiSelectElement;
    };
    interface HTMLAiSelectOptionElement extends Components.AiSelectOption, HTMLStencilElement {
    }
    var HTMLAiSelectOptionElement: {
        prototype: HTMLAiSelectOptionElement;
        new (): HTMLAiSelectOptionElement;
    };
    interface HTMLAiSelectPopoverElement extends Components.AiSelectPopover, HTMLStencilElement {
    }
    var HTMLAiSelectPopoverElement: {
        prototype: HTMLAiSelectPopoverElement;
        new (): HTMLAiSelectPopoverElement;
    };
    interface HTMLAiStringfyElement extends Components.AiStringfy, HTMLStencilElement {
    }
    var HTMLAiStringfyElement: {
        prototype: HTMLAiStringfyElement;
        new (): HTMLAiStringfyElement;
    };
    interface HTMLElementTagNameMap {
        "ai-backdrop": HTMLAiBackdropElement;
        "ai-button": HTMLAiButtonElement;
        "ai-control": HTMLAiControlElement;
        "ai-input": HTMLAiInputElement;
        "ai-popover": HTMLAiPopoverElement;
        "ai-select": HTMLAiSelectElement;
        "ai-select-option": HTMLAiSelectOptionElement;
        "ai-select-popover": HTMLAiSelectPopoverElement;
        "ai-stringfy": HTMLAiStringfyElement;
    }
}
declare namespace LocalJSX {
    interface AiBackdrop {
        /**
          * 点击背景时出发的事件
         */
        "onAiBackdropTap"?: (event: CustomEvent<void>) => void;
        /**
          * 点击背景时，是否阻止冒泡
         */
        "stopPropagation"?: boolean;
        /**
          * 背景是否可点击，默认为true，会出发aiBackdropTap
         */
        "tappable"?: boolean;
        /**
          * 背景是否可见，默认可见
         */
        "visible"?: boolean;
    }
    interface AiButton {
        /**
          * 适应父元素的宽度
         */
        "block"?: boolean;
        /**
          * 警告按钮
         */
        "danger"?: boolean;
        /**
          * 是否禁用
         */
        "disabled"?: boolean;
        /**
          * 幽灵按钮
         */
        "ghost"?: boolean;
        /**
          * 点击跳转的地址，指定此属性 button 的行为和 a 链接一致
         */
        "href"?: string;
        /**
          * 设置 button 原生的 type 值
         */
        "htmlType"?: string;
        /**
          * 点击
         */
        "onAiClick"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * 按钮形状
         */
        "shap"?: Shap;
        /**
          * 尺寸
         */
        "size"?: Size;
        /**
          * 相当于 a 链接的 target 属性，href 存在时生效
         */
        "target"?: string;
        /**
          * 类型
         */
        "type"?: Type;
    }
    interface AiControl {
    }
    interface AiInput {
        /**
          * 可以点击清除图标删除内容
         */
        "allowClear"?: boolean;
        /**
          * 是否有边框
         */
        "bordered"?: boolean;
        /**
          * 输入框默认内容
         */
        "defaultValue"?: string;
        /**
          * 是否禁用
         */
        "disabled"?: boolean;
        /**
          * 是否带有前缀的 input
         */
        "hasPrefix"?: boolean;
        /**
          * 是否带有后缀的 input
         */
        "hasSuffix"?: JSX.Element;
        /**
          * 最大长度
         */
        "maxLength"?: number;
        /**
          * 失焦
         */
        "onAiBlur"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * 值改变
         */
        "onAiChange"?: (event: CustomEvent<any>) => void;
        /**
          * 聚焦
         */
        "onAiFocus"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * 改变值
         */
        "onAiInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * 按下回车的回调
         */
        "onAiPressEnter"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * 预设文案
         */
        "placeholder"?: string;
        /**
          * 是否只读
         */
        "readonly"?: boolean;
        /**
          * 输入值
         */
        "value"?: string;
    }
    interface AiPopover {
        /**
          * 点击背景时关闭
         */
        "backdropDismiss"?: boolean;
        /**
          * 在popover中显示的组件
         */
        "component": ComponentRef;
        /**
          * 传递给弹出窗的数据
         */
        "componentProps"?: ComponentProps;
        /**
          * 触发动画的事件
         */
        "event"?: any;
        /**
          * 派发弹出层已销毁事件
         */
        "onAiPopoverDidDismiss"?: (event: CustomEvent<any>) => void;
        /**
          * 派发完成事件
         */
        "onAiPopoverDidPresent"?: (event: CustomEvent<void>) => void;
        /**
          * 派发弹出窗口关闭之前事件
         */
        "onAiPopoverWillDismiss"?: (event: CustomEvent<any>) => void;
        /**
          * 派发弹出之前事件
         */
        "onAiPopoverWillPresent"?: (event: CustomEvent<void>) => void;
        /**
          * index值
         */
        "overlayIndex": number;
        /**
          * 是否显示背景
         */
        "showBackdrop"?: boolean;
    }
    interface AiSelect {
        /**
          * 选中之后做对比的条件
         */
        "compareWith"?: string | Function | null;
        /**
          * 是否禁用
         */
        "disabled"?: boolean;
        /**
          * 派发失焦事件
         */
        "onAiBlur"?: (event: CustomEvent<void>) => void;
        /**
          * 派发取消选择的事件
         */
        "onAiCancel"?: (event: CustomEvent<void>) => void;
        /**
          * 派发选中项改变事件
         */
        "onAiChange"?: (event: CustomEvent<any>) => void;
        /**
          * 派发聚焦事件
         */
        "onAiFocus"?: (event: CustomEvent<void>) => void;
        /**
          * 派发样式改变
         */
        "onAiStyle"?: (event: CustomEvent<any>) => void;
        /**
          * 预设文案
         */
        "placeholder"?: string | null;
        /**
          * 选中的值
         */
        "selected"?: any | null;
    }
    interface AiSelectOption {
        /**
          * 是否禁用
         */
        "disabled"?: boolean;
        /**
          * 选项的value
         */
        "option"?: any | null;
    }
    interface AiSelectPopover {
        /**
          * 选项
         */
        "options"?: ReadonlyArray<any>;
    }
    interface AiStringfy {
        /**
          * data
         */
        "data"?: any;
    }
    interface IntrinsicElements {
        "ai-backdrop": AiBackdrop;
        "ai-button": AiButton;
        "ai-control": AiControl;
        "ai-input": AiInput;
        "ai-popover": AiPopover;
        "ai-select": AiSelect;
        "ai-select-option": AiSelectOption;
        "ai-select-popover": AiSelectPopover;
        "ai-stringfy": AiStringfy;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ai-backdrop": LocalJSX.AiBackdrop & JSXBase.HTMLAttributes<HTMLAiBackdropElement>;
            "ai-button": LocalJSX.AiButton & JSXBase.HTMLAttributes<HTMLAiButtonElement>;
            "ai-control": LocalJSX.AiControl & JSXBase.HTMLAttributes<HTMLAiControlElement>;
            "ai-input": LocalJSX.AiInput & JSXBase.HTMLAttributes<HTMLAiInputElement>;
            "ai-popover": LocalJSX.AiPopover & JSXBase.HTMLAttributes<HTMLAiPopoverElement>;
            "ai-select": LocalJSX.AiSelect & JSXBase.HTMLAttributes<HTMLAiSelectElement>;
            "ai-select-option": LocalJSX.AiSelectOption & JSXBase.HTMLAttributes<HTMLAiSelectOptionElement>;
            "ai-select-popover": LocalJSX.AiSelectPopover & JSXBase.HTMLAttributes<HTMLAiSelectPopoverElement>;
            "ai-stringfy": LocalJSX.AiStringfy & JSXBase.HTMLAttributes<HTMLAiStringfyElement>;
        }
    }
}
